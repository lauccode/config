
*** This is the debug buffer, where debug info will be written ***
Dependency unmet: gocode, please install it to use go-tools
Dependency unmet: goimports, please install it to use go-tools
Dependency unmet: gogetdoc, please install it to use go-tools
Dependency unmet: jq, please install it to use go-tools
Config-change detected:
shell:

    position="$(($kak_cursor_line * 100 / $kak_buf_line_count))%"
    if [ "$kak_opt_powerline_position_text_format" = "true" ]; then
        if [ "$position" = "100%" ]; then
            position="bottom"
        elif [ $kak_cursor_line -eq 1 ]; then
            position="top"
        fi
    fi
    echo "set-option window powerline_position $position"

----
shell:

        if [ $kak_opt_lsp_timestamp -eq $kak_timestamp ]; then
            echo "fail"
        else
            echo "evaluate-commands -draft -no-hooks %{set-option buffer lsp_timestamp %val{timestamp}; execute-keys '%'; set-option buffer lsp_draft %val{selection}}"
        fi
    
----
shell:
 (printf '
session   = "%s"
client    = "%s"
buffile   = "%s"
filetype  = "%s"
version   = %d
method    = "textDocument/hover"
[params.position]
line      = %d
character = %d
' "${kak_session}" "${kak_client}" "${kak_buffile}" "${kak_opt_filetype}" "${kak_timestamp}" $((${kak_cursor_line} - 1)) $((${kak_cursor_column} - 1)) | ${kak_opt_lsp_cmd} --request) > /dev/null 2>&1 < /dev/null & 
----
shell:

        if [ $kak_opt_lsp_timestamp -eq $kak_timestamp ]; then
            echo "fail"
        else
            echo "evaluate-commands -draft -no-hooks %{set-option buffer lsp_timestamp %val{timestamp}; execute-keys '%'; set-option buffer lsp_draft %val{selection}}"
        fi
    
----
shell:
if $kak_opt_lsp_auto_highlight_references; then echo "lsp-highlight-references"; else echo "nop"; fi
----
shell:

        if [ $kak_opt_lsp_timestamp -eq $kak_timestamp ]; then
            echo "fail"
        else
            echo "evaluate-commands -draft -no-hooks %{set-option buffer lsp_timestamp %val{timestamp}; execute-keys '%'; set-option buffer lsp_draft %val{selection}}"
        fi
    
----
shell:
 (printf '
session   = "%s"
client    = "%s"
buffile   = "%s"
filetype  = "%s"
version   = %d
method    = "textDocument/hover"
[params.position]
line      = %d
character = %d
' "${kak_session}" "${kak_client}" "${kak_buffile}" "${kak_opt_filetype}" "${kak_timestamp}" $((${kak_cursor_line} - 1)) $((${kak_cursor_column} - 1)) | ${kak_opt_lsp_cmd} --request) > /dev/null 2>&1 < /dev/null & 
----
shell:

    position="$(($kak_cursor_line * 100 / $kak_buf_line_count))%"
    if [ "$kak_opt_powerline_position_text_format" = "true" ]; then
        if [ "$position" = "100%" ]; then
            position="bottom"
        elif [ $kak_cursor_line -eq 1 ]; then
            position="top"
        fi
    fi
    echo "set-option window powerline_position $position"

----
shell:

        if [ $kak_opt_lsp_timestamp -eq $kak_timestamp ]; then
            echo "fail"
        else
            echo "evaluate-commands -draft -no-hooks %{set-option buffer lsp_timestamp %val{timestamp}; execute-keys '%'; set-option buffer lsp_draft %val{selection}}"
        fi
    
----
shell:
 (printf '
session   = "%s"
client    = "%s"
buffile   = "%s"
filetype  = "%s"
version   = %d
method    = "textDocument/hover"
[params.position]
line      = %d
character = %d
' "${kak_session}" "${kak_client}" "${kak_buffile}" "${kak_opt_filetype}" "${kak_timestamp}" $((${kak_cursor_line} - 1)) $((${kak_cursor_column} - 1)) | ${kak_opt_lsp_cmd} --request) > /dev/null 2>&1 < /dev/null & 
----
shell:

        if [ $kak_opt_lsp_timestamp -eq $kak_timestamp ]; then
            echo "fail"
        else
            echo "evaluate-commands -draft -no-hooks %{set-option buffer lsp_timestamp %val{timestamp}; execute-keys '%'; set-option buffer lsp_draft %val{selection}}"
        fi
    
----
shell:
if $kak_opt_lsp_auto_highlight_references; then echo "lsp-highlight-references"; else echo "nop"; fi
----
shell:

    if [ "$kak_opt_powerline_module_git" = "true" ]; then
        branch=$(cd "${kak_buffile%/*}" 2>/dev/null && git rev-parse --abbrev-ref HEAD 2>/dev/null)
    fi
    if [ -n "$branch" ]; then
        echo "$branch "
    else
        echo ""
    fi

----
shell:

        echo "set-option global powerlinefmt ''"
        echo "set-option global powerline_next_bg %opt{powerline_base_bg}"

        for module in ${kak_opt_powerline_format}; do
            if [ ! "${kak_opt_powerline_ignore_warnings}" = "true" ]; then
                warning="catch %{ echo -debug %{powerline.kak: Warning, trying to load non-existing module 'powerline-${module}' while building modeline} }"
            fi
            module=$(echo ${module} | sed "s:[^a-zA-Z-]:-:")
            echo "try %{ powerline-${module} } ${warning}"
        done
    
----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_git" = "true" ]; then
        fg=$kak_opt_powerline_color02
        bg=$kak_opt_powerline_color04
        if [ -n "$kak_opt_powerline_branch" ]; then
            [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
            echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %opt{powerline_branch} }"
            echo "set-option global powerline_next_bg $bg"
        fi
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_bufname" = "true" ]; then
        fg=$kak_opt_powerline_color00
        bg=$kak_opt_powerline_color03
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{bufname}{{context_info}}%opt{powerline_readonly} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_line_column" = "true" ]; then
        fg=$kak_opt_powerline_color06
        bg=$kak_opt_powerline_color09
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{cursor_line}{$fg,$bg}:{$fg,$bg}%val{cursor_char_column} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_mode_info" = "true" ]; then
        bg=$kak_opt_powerline_base_bg
        fg=$kak_opt_powerline_color07
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} {{mode_info}} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_filetype" = "true" ]; then
        fg=$kak_opt_powerline_color10
        bg=$kak_opt_powerline_color11
        if [ ! -z "$kak_opt_filetype" ]; then
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
            echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %opt{filetype} }"
            echo "set-option global powerline_next_bg $bg"
        fi
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_client" = "true" ]; then
        bg=$kak_opt_powerline_color12
        fg=$kak_opt_powerline_color13
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{client} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_session" = "true" ]; then
        bg=$kak_opt_powerline_color14
        fg=$kak_opt_powerline_color15
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{session} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_position" = "true" ]; then
        bg=$kak_opt_powerline_color01
        fg=$kak_opt_powerline_color05
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} ≣ %opt{powerline_position} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

        echo "set-option global powerlinefmt ''"
        echo "set-option global powerline_next_bg %opt{powerline_base_bg}"

        for module in ${kak_opt_powerline_format}; do
            if [ ! "${kak_opt_powerline_ignore_warnings}" = "true" ]; then
                warning="catch %{ echo -debug %{powerline.kak: Warning, trying to load non-existing module 'powerline-${module}' while building modeline} }"
            fi
            module=$(echo ${module} | sed "s:[^a-zA-Z-]:-:")
            echo "try %{ powerline-${module} } ${warning}"
        done
    
----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_git" = "true" ]; then
        fg=$kak_opt_powerline_color02
        bg=$kak_opt_powerline_color04
        if [ -n "$kak_opt_powerline_branch" ]; then
            [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
            echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %opt{powerline_branch} }"
            echo "set-option global powerline_next_bg $bg"
        fi
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_bufname" = "true" ]; then
        fg=$kak_opt_powerline_color00
        bg=$kak_opt_powerline_color03
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{bufname}{{context_info}}%opt{powerline_readonly} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_line_column" = "true" ]; then
        fg=$kak_opt_powerline_color06
        bg=$kak_opt_powerline_color09
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{cursor_line}{$fg,$bg}:{$fg,$bg}%val{cursor_char_column} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_mode_info" = "true" ]; then
        bg=$kak_opt_powerline_base_bg
        fg=$kak_opt_powerline_color07
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} {{mode_info}} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_filetype" = "true" ]; then
        fg=$kak_opt_powerline_color10
        bg=$kak_opt_powerline_color11
        if [ ! -z "$kak_opt_filetype" ]; then
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
            echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %opt{filetype} }"
            echo "set-option global powerline_next_bg $bg"
        fi
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_client" = "true" ]; then
        bg=$kak_opt_powerline_color12
        fg=$kak_opt_powerline_color13
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{client} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_session" = "true" ]; then
        bg=$kak_opt_powerline_color14
        fg=$kak_opt_powerline_color15
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %val{session} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    default=$kak_opt_powerline_base_bg
    next_bg=$kak_opt_powerline_next_bg
    normal=$kak_opt_powerline_separator
    thin=$kak_opt_powerline_separator_thin
    if [ "$kak_opt_powerline_module_position" = "true" ]; then
        bg=$kak_opt_powerline_color01
        fg=$kak_opt_powerline_color05
        [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}}$normal"
        echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} ≣ %opt{powerline_position} }"
        echo "set-option global powerline_next_bg $bg"
    fi

----
shell:

    total=$(printf '%s\n' "$kak_opt_buffers_info" | tr ' ' '\n' | wc -l)
    printf '%s\n' "set-option global buffers_total $total"
  
----
shell:

    # info title
    printf "info -title '$kak_opt_buffers_total buffers' -- %%^"

    index=0
    eval "set -- $kak_opt_buffers_info"
    while [ "$1" ]; do
      # limit lists too big
      index=$(($index + 1))
      if [ "$index" -gt "$kak_opt_max_list_buffers" ]; then
        printf '  …'
        break
      fi

      name=${1%_*}
      if [ "$name" = "$kak_bufname" ]; then
        printf ">"
      elif [ "$name" = "$kak_opt_alt_bufname" ]; then
        printf "#"
      else
        printf " "
      fi

      modified=${1##*_}
      if [ "$modified" = true ]; then
        printf "+ "
      else
        printf "  "
      fi

      if [ "$index" -lt 10 ]; then
        echo "0$index - $name"
      else
        echo "$index - $name"
      fi

      shift
    done
    printf ^\\n
  
----
shell:

    if [ -w "${kak_buffile}" ]; then
        echo ''
    else
        echo ' '
    fi

----
shell:

    if [ "$kak_opt_powerline_module_git" = "true" ]; then
        branch=$(cd "${kak_buffile%/*}" 2>/dev/null && git rev-parse --abbrev-ref HEAD 2>/dev/null)
    fi
    if [ -n "$branch" ]; then
        echo "$branch "
    else
        echo ""
    fi

----
shell:

    position="$(($kak_cursor_line * 100 / $kak_buf_line_count))%"
    if [ "$kak_opt_powerline_position_text_format" = "true" ]; then
        if [ "$position" = "100%" ]; then
            position="bottom"
        elif [ $kak_cursor_line -eq 1 ]; then
            position="top"
        fi
    fi
    echo "set-option window powerline_position $position"

----
shell:

    position="$(($kak_cursor_line * 100 / $kak_buf_line_count))%"
    if [ "$kak_opt_powerline_position_text_format" = "true" ]; then
        if [ "$position" = "100%" ]; then
            position="bottom"
        elif [ $kak_cursor_line -eq 1 ]; then
            position="top"
        fi
    fi
    echo "set-option window powerline_position $position"

----
shell:

        if [ $kak_opt_lsp_timestamp -eq $kak_timestamp ]; then
            echo "fail"
        else
            echo "evaluate-commands -draft -no-hooks %{set-option buffer lsp_timestamp %val{timestamp}; execute-keys '%'; set-option buffer lsp_draft %val{selection}}"
        fi
    
----
shell:
 (
lsp_draft=$(printf '%s.' "${kak_opt_lsp_draft}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed "s/$(printf '\t')/\\\\t/g")
lsp_draft=${lsp_draft%.}
printf '
session  = "%s"
client   = "%s"
buffile  = "%s"
filetype = "%s"
version  = %d
method   = "textDocument/didChange"
[params]
draft    = """
%s"""
' "${kak_session}" "${kak_client}" "${kak_buffile}" "${kak_opt_filetype}" "${kak_timestamp}" "${lsp_draft}" | ${kak_opt_lsp_cmd} --request) > /dev/null 2>&1 < /dev/null 
----
shell:
 (printf '
session   = "%s"
client    = "%s"
buffile   = "%s"
filetype  = "%s"
version   = %d
method    = "textDocument/hover"
[params.position]
line      = %d
character = %d
' "${kak_session}" "${kak_client}" "${kak_buffile}" "${kak_opt_filetype}" "${kak_timestamp}" $((${kak_cursor_line} - 1)) $((${kak_cursor_column} - 1)) | ${kak_opt_lsp_cmd} --request) > /dev/null 2>&1 < /dev/null & 
----
shell:

    position="$(($kak_cursor_line * 100 / $kak_buf_line_count))%"
    if [ "$kak_opt_powerline_position_text_format" = "true" ]; then
        if [ "$position" = "100%" ]; then
            position="bottom"
        elif [ $kak_cursor_line -eq 1 ]; then
            position="top"
        fi
    fi
    echo "set-option window powerline_position $position"

----
shell:

        if [ $kak_opt_lsp_timestamp -eq $kak_timestamp ]; then
            echo "fail"
        else
            echo "evaluate-commands -draft -no-hooks %{set-option buffer lsp_timestamp %val{timestamp}; execute-keys '%'; set-option buffer lsp_draft %val{selection}}"
        fi
    
----
shell:
 (
lsp_draft=$(printf '%s.' "${kak_opt_lsp_draft}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed "s/$(printf '\t')/\\\\t/g")
lsp_draft=${lsp_draft%.}
printf '
session  = "%s"
client   = "%s"
buffile  = "%s"
filetype = "%s"
version  = %d
method   = "textDocument/didChange"
[params]
draft    = """
%s"""
' "${kak_session}" "${kak_client}" "${kak_buffile}" "${kak_opt_filetype}" "${kak_timestamp}" "${lsp_draft}" | ${kak_opt_lsp_cmd} --request) > /dev/null 2>&1 < /dev/null 
----
shell:
 (printf '
session   = "%s"
client    = "%s"
buffile   = "%s"
filetype  = "%s"
version   = %d
method    = "textDocument/hover"
[params.position]
line      = %d
character = %d
' "${kak_session}" "${kak_client}" "${kak_buffile}" "${kak_opt_filetype}" "${kak_timestamp}" $((${kak_cursor_line} - 1)) $((${kak_cursor_column} - 1)) | ${kak_opt_lsp_cmd} --request) > /dev/null 2>&1 < /dev/null & 
----

