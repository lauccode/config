" BASIC
set nocompatible
syntax enable
filetype plugin on
" to select tab with mouse
" also to have buttons for termdebug !
set mouse=a
syntax enable
filetype plugin indent on
set nu rnu
set completeopt=menuone,noinsert,noselect "for completion
set shortmess+=c " avoid hit enter prompt
set expandtab    " number of space to indent with <Tab>
set smartindent
set tabstop=4 softtabstop=4
set cmdheight=2
set updatetime=50
set signcolumn=yes
set smartcase  " be sure to find even if bad case
" set list!  " show invisible character
" set lcs=tab:»_,trail:·  " set lcs=tab:j_,trail:·,eol:$
" set cwh=30 " high for the preview of incommand

" SHORTCUTS
:let mapleader = " "
nnoremap <leader>r :source $MYVIMRC<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>c :bd<CR>
noremap <F2> :edit ~/.vimrc<CR>

" MOVE
"  % key will be your friend. This key will jump between start and end of 
" curly braces quickly.

" COLOR SCHEME
" :colo   (to check colorscheme used)
" :colo delek
:colo industry

" REPEAT LAST COMMAND
" The last command entered with ':' can be repeated with @: and further repeats can be done with @@
" @:,@@
" This is useful for commands like :bnext or :cNext.

" CTAGS
" command! MakeTags !ctags -R .
" ^]        jump to tag under cursor
" g^]     list tags
" ^t        jump back up the tag stack

" FINDING FILES
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**
" Display all matching files when we tab
set wildmenu
" hit tab to :find by partial match
" Use * to make it fuzzy
" :b lets you autocomplete any open buffer
" FZF
" to find and open with fzf in terminal
" filepath=$(fzf);vim $filepath
" to put in .bashrc
" alias ff='filepath=$(fzf);vim $filepath'

" FINDING WORDS
" :vimgrep word *.cpp *.h
if executable("rg")  " use :grep <word> with ripgrep
  set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
  set grepformat=%f:%l:%c:%m
endif 
" Search for the exact word foo (not foobar): :grep -w foo (equivalent to :grep '\bfoo\b').
 " Search for foo in JavaScript files: :grep foo -t js
 " Search for foo in files matching a glob: :grep foo -g '*.js'

" AUTOCOMPLETE
" ^x^n        just for this file
" ^x^f        for filenames(works with path tricks)
" ^x ^]        for tags only
" ^n            complete
" ^p             go back

" FILE BROWSING
" E     explorer all screen
" Ex    explorer split screen
let g:netrw_banner = 0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()
" let g:netrw_list_hide.=",\(^\|\s\s\)\zs\.\S\+'
" :edit a folder to open file browser
" <CR>/v/t to open in an h-split/v-split/tab
" check |netrw-browse-maps| for more mappings

" BUILD
" set makeprg=ninja
" :make to run
" :cl to list errors
" :cc# to jump to error by number
" :cn n :cp to navigate
" :compiler <TAB>  (choose compiler to use)

" SNIPPETS:
" Read an empty HTML template and move cursor to title
nnoremap ,html :-1read $HOME/.vim/.skeleton.html<CR>3jwf>a

" TERMINAL
" exit from terminal : CTRL+\CTRL+n
" :terminal
" :terminal make  (launch make in terminal)
" launch script to build and use :
" :cbuffer (parse terminal buffer to fill quickfixlist) very practice !!!!!
" :cn, cp  (next, previous error of quickfixlist)

" DEBUG
packadd termdebug
" Termdebug bin/exe
" GDB cmd :
" b main  (breakpoint on main)
" r       (run)
" s       (step)
" n       (next)
" S+k     (evaluate variable under cursor)
" :let termdebugger="rust-gdb"
" we navigate to the source code view and type Ctrl+w and L to have it on the right.

" TAB
" :tabedit namefile.txt

" SEARCH AND REPLACE 
" to have preview :
" https://github.com/osyo-manga/vim-over
" Delete all line where "Binary File" is present
" g/Binary File/d

" FOLDER
" Fold activation and deactivation
" To activate fold use following command: 
" :set foldenable 
" :set foldmethod=indent 
:set foldmethod=syntax 
" To deactivate fold use following command: 
" :set nofoldenable
" zm to fold one level
" zR to reopen all

" :help folding les replis !
" :zf       créé repli
" :zo zc zd ouvre ferme supprime
" :zR zM    ouvre/ferme TOUT
" :zm zr    augmente/diminue niveau
" :zE zO    supprime/ouvre tous les replis sous le curseur

" MARKER
" Balises
" :ma       marqueur a
" :'a       va au marqueur a
" :marks    list des marques

" REGISTRES
" :registres    on voit tous les buffers de copier/coller
" "%p       path du fichier en cours

" COMMAND HISTORY
" see your history of commands : 
" ctrl-f.
" Use 
" jk 
" to move down and up the list and press Enter to execute a command again. 
" Or to hop back out of the list, press 
" ctrl-c. 
" You could then press 
" Esc or ctrl-c again
" to exit command mode entirely. 
